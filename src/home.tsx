/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/Home.glb -ts -o ./src/home.tsx 
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cube004: THREE.Mesh
    Text003: THREE.Mesh
    Text004: THREE.Mesh
  }
  materials: {
    ['Brand-Orange.005']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ActionName = 'Home.007'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}
type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Home(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null)
  const { nodes, materials, animations } = useGLTF('/Home.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)
  useEffect(() => {
    if (actions['Home.007']) {
      actions['Home.007'].play()
    }
  }, [actions['Home.007']])
  return (
    <group ref={group} {...props} dispose={null} position={[0,0,0]} scale={300}>
      <group name="Scene">
        <group name="Home001" scale={1}>
          <mesh name="Cube004" castShadow receiveShadow geometry={nodes.Cube004.geometry} material={materials['Brand-Orange.005']} scale={1}>
            <mesh name="Text003" castShadow receiveShadow geometry={nodes.Text003.geometry} material={nodes.Text003.material} scale-x={0.5} scale-z={0.5} />
          </mesh>
        </group>
        <mesh name="Text004" castShadow receiveShadow geometry={nodes.Text004.geometry} material={nodes.Text004.material} />
      </group>
    </group>
  )
}

useGLTF.preload('/Home.glb')
