/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/Hotel.glb -ts -o ./src/hotel.tsx 
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { a, useSpring } from '@react-spring/three'

type GLTFResult = GLTF & {
  nodes: {
    Text003: THREE.Mesh
    Cylinder001: THREE.Mesh
    Cylinder002: THREE.Mesh
    Cube004: THREE.Mesh
    Cube005: THREE.Mesh
  }
  materials: {
    ['Material.001']: THREE.MeshStandardMaterial
    ['Brand-Orange.006']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Hotel(props: JSX.IntrinsicElements['group'] & { hotelAppear: boolean}) {
  const { nodes, materials } = useGLTF('/Hotel.glb') as GLTFResult

  const [rotateSpring, rotateApi] = useSpring(() => ({
    from: {
      rotation: [0, 0, 0],
    },
    to: {
      rotation: [0, Math.PI*2 , 0],
    },
    loop: true,
    config: {
      duration: 12000,
    },
  }))
  
  useEffect(() => {
    rotateApi.start()
  }, [])
  
  return (
    <a.group {...props} dispose={null} rotation={rotateSpring.rotation as any}>
      <mesh castShadow receiveShadow geometry={nodes.Text003.geometry} material={materials['Material.001']} />
      <mesh castShadow receiveShadow geometry={nodes.Cylinder001.geometry} material={materials['Material.001']}>
        <mesh castShadow receiveShadow geometry={nodes.Cylinder002.geometry} material={materials['Brand-Orange.006']} rotation={[Math.PI / 2, 0, 3.139]} scale={0.338} />
      </mesh>
      <mesh castShadow receiveShadow geometry={nodes.Cube004.geometry} material={materials['Brand-Orange.006']} />
      <mesh castShadow receiveShadow geometry={nodes.Cube005.geometry} material={materials['Brand-Orange.006']} />
    </a.group>
  )
}

useGLTF.preload('/Hotel.glb')
